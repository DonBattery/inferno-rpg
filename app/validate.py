# validate.py

# Ebben a file-ban valid√°tor az az √©rv√©nyes√≠t≈ë funkci√≥k vannak, 
# ezek feladata, hogy bizonyos szempontok szerint meg√°llap√≠ts√°k, hogy egy bemeneti √©rt√©k
# √©rv√©nyes-e vagy sem. P√©ld√°ul, hogy a karakter neve e√©l√©g hossz√∫-e, √©s nem haszn√°lja-e senki m√°s.
# Ezek a funkci√≥k mind√≠g egy tuple-val t√©rnek vissza amiben k√©t √©rt√©k van, az els≈ë egy boolean
# ami megmondja, hogy a bemeneti √©rt√©k √©rv√©nyes-e. A m√°sodik egy string ami a hiba √ºzenetet tartalmazza,
# ennek csak akkor van √©rt√©ke ha a bemeneti √©rt√©k √©rv√©nytelen (pl.: "A N√©vnek legal√°bb 3 karakter hossz√∫nak kell lennie.").

import re

import regex
import yaml

def validate_name(name:str, used_names:dict) -> tuple:
    if len(name) < 3:
        return False, "A N√©vnek legal√°bb 3 karakter hossz√∫nak kell lennie."
    if len(name) > 28:
        return False, "A N√©v nem lehet hosszabb mint 28 karakter."
    if name in used_names:
        return False, f"A {name} n√©v m√°r foglalt."
    return True, ""

def validate_race(race:str, game_world:dict) -> tuple:
    if not race in game_world["races"]:
        return False, f"A {race} nem j√°tszhat√≥ faj. J√°tszhat√≥ fajok: {', '.join(game_world['races'].keys())}"
    return True, ""

def validate_job(job:str, game_world:dict) -> tuple:
    if not job in game_world["jobs"]:
        return False, f"A {job} nem j√°tszhat√≥ kaszt. J√°tszhat√≥ kasztok: {', '.join(game_world['jobs'].keys())}"
    return True, ""

def validate_csonti_pinput(input_str:str) -> tuple:
    # Megn√©zz√ºk vannak-e Emoji-k üê∏
    emoji_pattern = re.compile("["
                                u"\U0001F600-\U0001F64F"  # emoticons
                                u"\U0001F300-\U0001F5FF"  # symbols & pictographs
                                u"\U0001F680-\U0001F6FF"  # transport & map symbols
                                u"\U0001F1E0-\U0001F1FF"  # flags (iOS)
                                "]+", flags=re.UNICODE)
    if emoji_pattern.search(input_str):
        return False, "Csonti nem besz√©li az em√≥dzs√≠k nyelv√©t..."

    # Csak bet≈±ket, sz√°mokat √©s √≠r√°sjeleket enged√ºnk.
    if regex.fullmatch(r'^[\w\s\p{P}]+$', input_str):
        return True, ""
    else:
        return False, "Csonti nem fog ilyen hieroglif√°kat mondani..."

def validate_game_config_file(config_file_path:str, game_element_types:list) -> tuple:
    try:
        with open(config_file_path, "r") as config_file:
            config_data = yaml.safe_load(config_file)
    except Exception as err:
        return False, f"{config_file_path}: nem lehet bet√∂lteni a konfigur√°ci√≥s file-t: {err}"

    if not isinstance(config_data, dict):
        return False, f"{config_file_path}: nem szab√°lyos YAML file"

    for key in config_data:
        if not key in game_element_types:
            return False, f"{config_file_path}: a {key} nem ismert j√°t√©k elem"

    return True, ""

def validate_game_config_files(config_files:list, game_element_types:list) -> tuple:
    errors = []

    for config_file_path in config_files:
        valid, msg = validate_game_config_file(config_file_path, game_element_types)
        if not valid:
            errors.append(msg)

    if errors:
        return False, "Hib√°s konfigur√°ci√≥!\n" + '\n'.join(errors)

    return True, ""
